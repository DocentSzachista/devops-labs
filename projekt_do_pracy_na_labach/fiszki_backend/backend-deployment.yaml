# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: lab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend-service
          image: fiszki-backend:1.0
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 8000
          env:
            - name: MONGODB_HOST
              value: 10.97.216.177
            - name: logging
              valueFrom:
                configMapKeyRef:
                  name: backend-cm
                  key: logging
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: backend-cm
                  key: DATABASE_URL
          volumeMounts: # added volume to deployment
          - name: pv-backend
            mountPath: /data/pv-backend/
            readOnly: true
      volumes:
        - name: pv-backend
          persistentVolumeClaim:
            claimName: pv-backend
        

# Service inside Deployment file
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  type: NodePort
  ports:
    - protocol: TCP
      port: 80  
      targetPort: 8000  
      nodePort: 30000

### Commands
## 3.0
## Creating a new namespace called "lab"
# kubectl create namespace lab
## Setting the current context to use the "lab" namespace
# kubectl config set-context --current --namespace=lab
## Applying configuration from pv-backend.yaml file
# kubectl apply -f .\pv-backend.yaml
## Getting Persistent Volumes (PVs)
# kubectl get pv

## 3.5
## Applying configuration from pvc-backend.yaml file
# kubectl apply -f .\pvc-backend.yaml
## Getting Persistent Volume Claims (PVCs) in the "lab" namespace
# kubectl get pvc -n lab  

## 4.0
## Applying configuration from mongo-ss.yaml file
# kubectl apply -f .\mongo-ss.yaml
## Getting Pods
# kubectl get pod
## Getting Services
# kubectl get services
## Getting Persistent Volumes (PVs)
# kubectl get pv 

## 4.5
## Deleting all resources in the "lab" namespace
# kubectl delete all --all -n lab
## Applying configuration from backend-cm.yaml file
# kubectl apply -f .\backend-cm.yaml  
## Applying configuration from pvc-backend.yaml file
# kubectl apply -f .\pvc-backend.yaml
## Applying configuration from pv-backend.yaml file
# kubectl apply -f .\pv-backend.yaml 
## Applying configuration from mongo-ss.yaml file
# kubectl apply -f .\mongo-ss.yaml 
## Getting all resources
# kubectl get all

## 5.0
## Applying configuration from cronjob.yaml file
# kubectl apply -f .\cronjob.yaml
## Watching CronJobs
# kubectl get cronjob --watch