apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: fiszkibackend
  labels:
    app: fiszki-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fiszki-backend
  template:
    metadata:
      labels:
        app: fiszki-backend
    spec:
      containers:
      - name: fiszki-backend
        image: backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: backend-port

# LABORATORIUM 2 - PODSTAWY KUBERNETESA

# docker pull mongo:4.4.6
# docker build -t backend:latest -t backend:2.2.0 .
# docker build -t frontend:latest -t frontend:2.2.0 .

# kubectl create namespace fiszkibackend
# [Feedback from the terminal: namespace/fiszkibackend created]
# kubectl config set-context --current --namespace=fiszkibackend
# [Feedback from the terminal: Context "minikube" modified.]

# Pliki backend-deployment.yaml oraz backend-service.yaml zawarte zostały w katalogu yamls/.

# kubectl apply -f yamls/
# [Feedback from the terminal: deployment.apps/backend-deployment created
#                              service/backend-service created]

# kubectl get deployments
# kubectl get pods
# kubectl describe deployment backend-deployment

# W związku z faktem, iż pracuję na serwerze zdalnym Adama Henslera, aby uzyskać dostęp do usług
# udostępnianych przez aplikację w klastrze, muszę trzymać otwarty tunel SSH między hostem
# (systemem Ubuntu na VM) i klastrem minikube'a z włączonym forwardowaniem portu.

# minikube service backend-service --url -n fiszkibackend
# ssh -i ~/.minikube/machines/minikube/id_rsa docker@$(minikube ip) -L 30080:0.0.0.0:30080

# Oprócz tego, po uzyskaniu dostępu z poziomu hosta do usług udostępnianych przez aplikację
# w klastrze po hoście localhost, należy wykonać jeszcze jedno forwardowanie portów - wynika
# to z faktu, iż dalej nie ma dostępu do tych usług z maszyny zdalnej. Forwarduję więc porty
# między hostem (serwerem zdalnym) i maszyną lokalną - dokonuję tego w najprostszy ze sposobów,
# czyli poprzez wbudowane w VS Code narzędzie do tego (zakładka "PORTS" obok zakładki "TERMINAL").

# Po wszystkich tych czynnościach, wszystko (w końcu) zadziałało tak, jak powinno.

# kubectl delete deployments --all
# [Feedback from the terminal: deployment.apps "backend-deployment" deleted]

# kubectl delete service backend-service
# [Feedback from the terminal: service "backend-service" deleted]